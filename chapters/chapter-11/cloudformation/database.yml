AWSTemplateFormatVersion: '2010-09-09'
Description: A stack that creates an RDS instance and places it into two subnets
Parameters:
  NetworkStackName:
    Type: String
    Description: The name of the networking stack that this stack will build upon.
  DBInstanceClass:
    Type: String
    Description: The ID of the second subnet to place the RDS instance into.
    Default: 'db.t2.micro'
  DBName:
    Type: String
    Description: The name of the database that is created within the PostgreSQL instance.
  DBUsername:
    Type: String
    Description: The master user name for the PostgreSQL instance.

Resources:
  # [N]:rds]:security - A database secret used as a password for the database.
  Secret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Ref 'DBUsername'
      GenerateSecretString:
        # This will generate a JSON object with the keys "username" and "password". The resulting JSON structure will contain a "username" & a "password".
        SecretStringTemplate: !Join ['', ['{"username": "', !Ref 'DBUsername' ,'"}']]
        # [N]:rds]:security - The "password" argument defines that the generated password be added to the resulting JSON structure in the password field.
        GenerateStringKey: "password"
        PasswordLength: 32
        # [N] We’re excluding some characters from the password creation because they are not allowed in PostgreSQL RDS instances.
        ExcludeCharacters: '"@/\'

  # [N]:rds]:security - A database subnet group which combines a set of subnets into a group to be used by database instance.
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for the RDS instance
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds:
        - Fn::ImportValue:
            !Join [':', [!Ref 'NetworkStackName', 'PrivateSubnetOne']]
        - Fn::ImportValue:
            !Join [':', [!Ref 'NetworkStackName', 'PrivateSubnetTwo']]

  # [N] We pass the previously created subnetGroup, databaseSecurityGroup, and databaseSecret into the DB instance configuration.
  PostgresInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      DBInstanceClass: !Ref 'DBInstanceClass'
      DBName: !Ref 'DBName'
      
      # [N] The subnet group
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      Engine: postgres
      EngineVersion: 12.9

      # [N] The database secret. This associates the secret with the database, so we can take advantage of the secret rotation feature137 provided by the AWS Secrets Manager.
      MasterUsername: !Ref 'DBUsername'
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref Secret, ':SecretString:password}}' ]]
      PubliclyAccessible: false
      
      VPCSecurityGroups: 
        # [N] A database security group into which to put the database
        - Fn::ImportValue:
            !Join [':', [!Ref 'NetworkStackName', 'DBSecurityGroupId']]

  SecretRDSInstanceAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref Secret
      TargetId: !Ref PostgresInstance
      TargetType: AWS::RDS::DBInstance

# [N] Finally, the PostgresDatabase construct exports some resources from the database stack, so we can use them from other stacks like our service stack. We’ll need the endpointAddress, endpointPort, databaseName, securityGroupId, and secret parameters in the service stack to connect our Spring Boot application to the database.
Outputs:
  EndpointAddress:
    Description: Address of the RDS endpoint.
    Value: !GetAtt 'PostgresInstance.Endpoint.Address'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EndpointAddress' ] ]
  EndpointPort:
    Description: Port of the RDS endpoint.
    Value: !GetAtt 'PostgresInstance.Endpoint.Port'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EndpointPort' ] ]
  DBName:
    Description: The name of the database that is created within the PostgreSQL instance.
    Value: !Ref DBName
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'DBName' ] ]

  # [N] We keep the database username and password in a Secret, rather than as plaintext values. We only store the Secret’s ARN in the parameter store. Therefore, no sensitive information is shared through the parameter store.
  Secret:
    Description: Reference to the secret containing the password to the database.
    Value: !Ref 'Secret'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Secret' ] ]
  StackName:
    Description: The name of this stack
    Value: !Ref 'AWS::StackName'
