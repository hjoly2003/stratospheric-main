# [N]:chap7]:jobqueue - This workflow deploys the Todo-App itself.
name: 05 - Update the Todo-App in staging

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

# [N]:chap7]:jobqueue - This workflow is now triggered exclusively via workflow_dispatch, which means that we can trigger it manually or via the GitHub API. In our case, the Lambda will trigger the workflow via the GitHub API. It will pass the input parameter docker-image-tag so that the workflow knows which Docker image
on:
  workflow_dispatch:
    inputs:
      docker-image-tag:
        description: "The Docker image to deploy"
        required: true
jobs:
  deploy:
    runs-on: ubuntu-20.04
    name: Deploy Todo App
    if: github.ref == 'refs/heads/main'
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'maven'

    - name: NPM install
      working-directory: cdk
      run: npm install

    - name: Deploy service stack
      working-directory: cdk
      run: npm run service:deploy -- -c dockerImageTag=${{ github.event.inputs.docker-image-tag }}

    # Each Service stack updates creates a new parameter stack that CloudFormation does not clean up for us.
    # This step deletes all "*Service-Parameters*" stacks except the latest one to keep the house clean.
    - name: Clean up old parameter stacks
      timeout-minutes: 30
      working-directory: cdk
      run: |
        aws cloudformation describe-stacks --region us-east-1 --query "Stacks[].StackName" --output text | sed -e "s/\s\+/\n/g" | grep -e "staging-todo-app-Service-Parameters" | sort -r | tail -n+2 > stacks_to_be_deleted.txt
        for stack in $(cat stacks_to_be_deleted.txt); do aws cloudformation delete-stack --stack-name $stack --region us-east-1;  done
